"""
Elbow Turning Vane Generated Noise Calculations
Based on ASHRAE 1991 Algorithms for HVAC Acoustics

This script implements calculations for:
1. Sound power levels generated by elbows fitted with turning vanes
2. Total pressure loss coefficient calculation
3. Blockage factor determination
4. Flow velocity in turning vane constriction
5. Strouhal number calculation
6. Characteristic spectrum determination
7. Support for frequency bands from 63 Hz to 8,000 Hz

Author: HVAC Acoustics Calculator
Date: 2024
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Tuple, Dict, List, Optional, Union, Any
import warnings

# Set up plotting style
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

class ElbowTurningVaneCalculator:
    """
    Calculator for elbow turning vane generated noise based on ASHRAE 1991 standards.
    
    Implements:
    - Sound power levels for elbows with turning vanes (Equation 4.7)
    - Total pressure loss coefficient (Equation 4.8)
    - Blockage factor calculation (Equation 4.9)
    - Flow velocity in constriction (Equation 4.10)
    - Strouhal number calculation (Equation 4.11)
    - Characteristic spectrum (Equation 4.12)
    """
    
    def __init__(self):
        """Initialize the calculator with ASHRAE reference data."""
        self._initialize_frequency_bands()
        
    def _initialize_frequency_bands(self):
        """Initialize standard 1/1 octave frequency bands."""
        self.frequency_bands = [63, 125, 250, 500, 1000, 2000, 4000, 8000]
        
    def calculate_pressure_loss_coefficient(self, total_pressure_drop: float, 
                                         flow_rate: float, duct_area: float) -> float:
        """
        Calculate the total pressure loss coefficient, C.
        
        Equation 4.8: C = 15.9e6 * (ΔP / (Q/S²))
        
        Args:
            total_pressure_drop: Total pressure drop across blades (in. w.g.)
            flow_rate: Flow rate (cfm)
            duct_area: Cross-sectional area of duct (ft²)
            
        Returns:
            Pressure loss coefficient C
        """
        if flow_rate <= 0 or duct_area <= 0:
            raise ValueError("Flow rate and duct area must be positive")
            
        # Calculate velocity term (Q/S²)
        velocity_term = flow_rate / (duct_area ** 2)
        
        # Calculate pressure loss coefficient
        C = 15.9e6 * (total_pressure_drop / velocity_term)
        return C
    
    def calculate_blockage_factor(self, pressure_loss_coefficient: float) -> float:
        """
        Calculate the blockage factor, BF.
        
        Equation 4.9: BF = (√C - 1) / (C - 1)
        
        Args:
            pressure_loss_coefficient: Total pressure loss coefficient C
            
        Returns:
            Blockage factor BF
        """
        if pressure_loss_coefficient <= 1:
            raise ValueError("Pressure loss coefficient must be greater than 1")
            
        BF = (np.sqrt(pressure_loss_coefficient) - 1) / (pressure_loss_coefficient - 1)
        return BF
    
    def calculate_constriction_velocity(self, flow_rate: float, duct_area: float, 
                                      blockage_factor: float) -> float:
        """
        Calculate the flow velocity in the turning vane constriction.
        
        Equation 4.10: Uc = 0.0167 * (Q / (BF * S))
        
        Args:
            flow_rate: Flow rate (cfm)
            duct_area: Cross-sectional area of duct (ft²)
            blockage_factor: Blockage factor BF
            
        Returns:
            Flow velocity in constriction (ft/sec)
        """
        if flow_rate <= 0 or duct_area <= 0 or blockage_factor <= 0:
            raise ValueError("All parameters must be positive")
            
        # Convert flow rate from cfm to ft³/sec
        flow_rate_fps = flow_rate / 60.0
        
        # Calculate constriction velocity
        Uc = 0.0167 * (flow_rate_fps / (blockage_factor * duct_area))
        return Uc
    
    def calculate_strouhal_number(self, frequency: float, vane_chord_length: float, 
                                constriction_velocity: float) -> float:
        """
        Calculate the Strouhal number.
        
        Equation 4.11: St = (f * CD) / Uc
        
        Args:
            frequency: 1/1 octave band center frequency (Hz)
            vane_chord_length: Chord length of typical vane (in.)
            constriction_velocity: Flow velocity in constriction (ft/sec)
            
        Returns:
            Strouhal number St
        """
        if frequency <= 0 or vane_chord_length <= 0 or constriction_velocity <= 0:
            raise ValueError("All parameters must be positive")
            
        # Convert chord length from inches to feet
        chord_length_ft = vane_chord_length / 12.0
        
        St = (frequency * chord_length_ft) / constriction_velocity
        return St
    
    def calculate_characteristic_spectrum(self, strouhal_number: float) -> float:
        """
        Calculate the characteristic spectrum, KT.
        
        Equation 4.12: KT = -47.5 - 7.69[log10(St)]².³
        
        Args:
            strouhal_number: Strouhal number St
            
        Returns:
            Characteristic spectrum KT (dB)
        """
        if strouhal_number <= 0:
            raise ValueError("Strouhal number must be positive")
            
        KT = -47.5 - 7.69 * (np.log10(strouhal_number)) ** 2.3
        return KT
    
    def calculate_sound_power_level(self, frequency: float, constriction_velocity: float,
                                  duct_area: float, vane_chord_length: float,
                                  num_vanes: int, characteristic_spectrum: float) -> float:
        """
        Calculate the 1/1 octave band sound power level.
        
        Equation 4.7: Lw(f) = KT + 10*log10(Uc) + 50*log10(S) + 10*log10(CD) + 10*log10(n)
        
        Args:
            frequency: 1/1 octave band center frequency (Hz)
            constriction_velocity: Flow velocity in constriction (ft/sec)
            duct_area: Cross-sectional area of duct (ft²)
            vane_chord_length: Chord length of typical vane (in.)
            num_vanes: Number of turning vanes
            characteristic_spectrum: Characteristic spectrum KT (dB)
            
        Returns:
            Sound power level (dB re 10⁻¹² W)
        """
        if any(param <= 0 for param in [constriction_velocity, duct_area, vane_chord_length, num_vanes]):
            raise ValueError("All parameters must be positive")
            
        # Convert chord length from inches to feet for consistency
        chord_length_ft = vane_chord_length / 12.0
        
        # Calculate sound power level
        Lw = (characteristic_spectrum + 
              10 * np.log10(constriction_velocity) + 
              50 * np.log10(duct_area) + 
              10 * np.log10(chord_length_ft) + 
              10 * np.log10(num_vanes))
        
        return Lw
    
    def calculate_complete_spectrum(self, flow_rate: float, duct_area: float, 
                                  duct_height: float, vane_chord_length: float,
                                  num_vanes: int, total_pressure_drop: float,
                                  flow_velocity: float) -> Dict[str, float]:
        """
        Calculate the complete sound power level spectrum for all frequency bands.
        
        Args:
            flow_rate: Flow rate (cfm)
            duct_area: Cross-sectional area of duct (ft²)
            duct_height: Duct height normal to turning vane length (ft)
            vane_chord_length: Chord length of typical vane (in.)
            num_vanes: Number of turning vanes
            total_pressure_drop: Total pressure drop across blades (in. w.g.)
            flow_velocity: Flow velocity in duct (ft/sec)
            
        Returns:
            Dictionary of frequency bands and corresponding sound power levels
        """
        # Step 1: Calculate pressure loss coefficient
        C = self.calculate_pressure_loss_coefficient(total_pressure_drop, flow_rate, duct_area)
        
        # Step 2: Calculate blockage factor
        BF = self.calculate_blockage_factor(C)
        
        # Step 3: Calculate constriction velocity
        Uc = self.calculate_constriction_velocity(flow_rate, duct_area, BF)
        
        # Calculate spectrum for each frequency band
        spectrum = {}
        for freq in self.frequency_bands:
            # Step 4: Calculate Strouhal number
            St = self.calculate_strouhal_number(freq, vane_chord_length, Uc)
            
            # Step 5: Calculate characteristic spectrum
            KT = self.calculate_characteristic_spectrum(St)
            
            # Step 6: Calculate sound power level
            Lw = self.calculate_sound_power_level(freq, Uc, duct_area, vane_chord_length, 
                                                num_vanes, KT)
            
            spectrum[str(freq)] = Lw
            
        return spectrum
    
    def create_spectrum_dataframe(self, flow_rate: float, duct_area: float, 
                                duct_height: float, vane_chord_length: float,
                                num_vanes: int, total_pressure_drop: float,
                                flow_velocity: float) -> pd.DataFrame:
        """
        Create a pandas DataFrame with the complete spectrum data.
        
        Args:
            Same parameters as calculate_complete_spectrum
            
        Returns:
            DataFrame with frequency bands and sound power levels
        """
        spectrum = self.calculate_complete_spectrum(flow_rate, duct_area, duct_height,
                                                  vane_chord_length, num_vanes,
                                                  total_pressure_drop, flow_velocity)
        
        df = pd.DataFrame({
            'Frequency (Hz)': list(spectrum.keys()),
            'Sound Power Level (dB)': list(spectrum.values())
        })
        
        # Convert frequency to numeric for proper sorting
        df['Frequency (Hz)'] = pd.to_numeric(df['Frequency (Hz)'])
        df = df.sort_values('Frequency (Hz)').reset_index(drop=True)
        
        return df
    
    def plot_spectrum(self, flow_rate: float, duct_area: float, duct_height: float,
                     vane_chord_length: float, num_vanes: int, total_pressure_drop: float,
                     flow_velocity: float, save_path: Optional[str] = None):
        """
        Plot the sound power level spectrum.
        
        Args:
            Same parameters as calculate_complete_spectrum
            save_path: Optional path to save the plot
        """
        df = self.create_spectrum_dataframe(flow_rate, duct_area, duct_height,
                                          vane_chord_length, num_vanes,
                                          total_pressure_drop, flow_velocity)
        
        plt.figure(figsize=(12, 8))
        
        # Create the spectrum plot
        plt.subplot(2, 2, 1)
        plt.semilogx(df['Frequency (Hz)'], df['Sound Power Level (dB)'], 
                    'o-', linewidth=2, markersize=8, color='steelblue')
        plt.grid(True, alpha=0.3)
        plt.xlabel('Frequency (Hz)')
        plt.ylabel('Sound Power Level (dB re 10⁻¹² W)')
        plt.title('Elbow Turning Vane Generated Noise Spectrum')
        
        # Add parameter summary
        plt.subplot(2, 2, 2)
        plt.axis('off')
        param_text = f"""
        Parameters:
        Flow Rate: {flow_rate:.1f} cfm
        Duct Area: {duct_area:.2f} ft²
        Duct Height: {duct_height:.2f} ft
        Vane Chord Length: {vane_chord_length:.1f} in
        Number of Vanes: {num_vanes}
        Pressure Drop: {total_pressure_drop:.2f} in. w.g.
        Flow Velocity: {flow_velocity:.1f} ft/sec
        """
        plt.text(0.1, 0.9, param_text, transform=plt.gca().transAxes, 
                fontsize=10, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='lightgray', alpha=0.8))
        
        # Calculate intermediate values for display
        C = self.calculate_pressure_loss_coefficient(total_pressure_drop, flow_rate, duct_area)
        BF = self.calculate_blockage_factor(C)
        Uc = self.calculate_constriction_velocity(flow_rate, duct_area, BF)
        
        # Display intermediate calculations
        plt.subplot(2, 2, 3)
        plt.axis('off')
        calc_text = f"""
        Intermediate Calculations:
        Pressure Loss Coefficient (C): {C:.4f}
        Blockage Factor (BF): {BF:.4f}
        Constriction Velocity (Uc): {Uc:.1f} ft/sec
        """
        plt.text(0.1, 0.9, calc_text, transform=plt.gca().transAxes, 
                fontsize=10, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
        
        # Create bar chart of spectrum
        plt.subplot(2, 2, 4)
        bars = plt.bar(range(len(df)), df['Sound Power Level (dB)'], 
                      color='lightcoral', alpha=0.7)
        plt.xlabel('Frequency Band Index')
        plt.ylabel('Sound Power Level (dB)')
        plt.title('Spectrum Bar Chart')
        plt.xticks(range(len(df)), [f'{freq}' for freq in df['Frequency (Hz)']], 
                  rotation=45)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        plt.show()
    
    def generate_report(self, flow_rate: float, duct_area: float, duct_height: float,
                       vane_chord_length: float, num_vanes: int, total_pressure_drop: float,
                       flow_velocity: float) -> str:
        """
        Generate a comprehensive report of the calculations.
        
        Args:
            Same parameters as calculate_complete_spectrum
            
        Returns:
            Formatted report string
        """
        # Calculate all intermediate values
        C = self.calculate_pressure_loss_coefficient(total_pressure_drop, flow_rate, duct_area)
        BF = self.calculate_blockage_factor(C)
        Uc = self.calculate_constriction_velocity(flow_rate, duct_area, BF)
        
        # Get spectrum
        spectrum = self.calculate_complete_spectrum(flow_rate, duct_area, duct_height,
                                                  vane_chord_length, num_vanes,
                                                  total_pressure_drop, flow_velocity)
        
        # Calculate overall sound power level (A-weighted)
        # Note: This is a simplified calculation - actual A-weighting would require
        # frequency-specific corrections
        overall_lw = 10 * np.log10(sum(10**(Lw/10) for Lw in spectrum.values()))
        
        report = f"""
ELBOW TURNING VANE GENERATED NOISE CALCULATION REPORT
Based on ASHRAE 1991 Algorithms for HVAC Acoustics

INPUT PARAMETERS:
================
Flow Rate: {flow_rate:.1f} cfm
Duct Area: {duct_area:.2f} ft²
Duct Height: {duct_height:.2f} ft
Vane Chord Length: {vane_chord_length:.1f} inches
Number of Turning Vanes: {num_vanes}
Total Pressure Drop: {total_pressure_drop:.2f} in. w.g.
Flow Velocity: {flow_velocity:.1f} ft/sec

INTERMEDIATE CALCULATIONS:
=========================
Step 1 - Pressure Loss Coefficient (C):
  C = 15.9e6 × (ΔP / (Q/S²)) = {C:.4f}

Step 2 - Blockage Factor (BF):
  BF = (√C - 1) / (C - 1) = {BF:.4f}

Step 3 - Constriction Velocity (Uc):
  Uc = 0.0167 × (Q / (BF × S)) = {Uc:.1f} ft/sec

SOUND POWER LEVEL SPECTRUM:
==========================
Frequency (Hz)    Sound Power Level (dB re 10⁻¹² W)
"""
        
        for freq, lw in spectrum.items():
            report += f"{freq:>8}         {lw:>8.1f}\n"
        
        report += f"""
OVERALL SOUND POWER LEVEL: {overall_lw:.1f} dB re 10⁻¹² W

NOTES:
======
- Calculations based on ASHRAE 1991 Algorithms for HVAC Acoustics
- Valid for elbow angles between 60° and 120°
- Characteristic spectrum calculated using Equation 4.12
- All calculations assume proper turning vane installation
"""
        
        return report
    
    def validate_inputs(self, flow_rate: float, duct_area: float, duct_height: float,
                       vane_chord_length: float, num_vanes: int, total_pressure_drop: float,
                       flow_velocity: float) -> Dict[str, bool]:
        """
        Validate input parameters against typical ranges.
        
        Args:
            Same parameters as calculate_complete_spectrum
            
        Returns:
            Dictionary of validation results
        """
        validations = {}
        
        # Flow rate validation (typical HVAC range)
        validations['flow_rate'] = 100 <= flow_rate <= 10000
        
        # Duct area validation
        validations['duct_area'] = 0.1 <= duct_area <= 100
        
        # Duct height validation
        validations['duct_height'] = 0.1 <= duct_height <= 10
        
        # Vane chord length validation
        validations['vane_chord_length'] = 1 <= vane_chord_length <= 24
        
        # Number of vanes validation
        validations['num_vanes'] = 1 <= num_vanes <= 20
        
        # Pressure drop validation
        validations['pressure_drop'] = 0.01 <= total_pressure_drop <= 5.0
        
        # Flow velocity validation
        validations['flow_velocity'] = 100 <= flow_velocity <= 3000
        
        return validations


def main():
    """Main function to demonstrate the calculator usage."""
    print("Elbow Turning Vane Generated Noise Calculator")
    print("Based on ASHRAE 1991 Algorithms for HVAC Acoustics")
    print("=" * 60)
    
    # Initialize calculator
    calculator = ElbowTurningVaneCalculator()
    
    # Example parameters (typical values for a 90° elbow with turning vanes)
    flow_rate = 1000.0  # cfm
    duct_area = 2.0     # ft²
    duct_height = 1.0   # ft
    vane_chord_length = 6.0  # inches
    num_vanes = 5
    total_pressure_drop = 0.5  # in. w.g.
    flow_velocity = 500.0  # ft/sec
    
    print(f"Example Calculation Parameters:")
    print(f"Flow Rate: {flow_rate} cfm")
    print(f"Duct Area: {duct_area} ft²")
    print(f"Duct Height: {duct_height} ft")
    print(f"Vane Chord Length: {vane_chord_length} inches")
    print(f"Number of Vanes: {num_vanes}")
    print(f"Pressure Drop: {total_pressure_drop} in. w.g.")
    print(f"Flow Velocity: {flow_velocity} ft/sec")
    print()
    
    # Validate inputs
    validations = calculator.validate_inputs(flow_rate, duct_area, duct_height,
                                           vane_chord_length, num_vanes,
                                           total_pressure_drop, flow_velocity)
    
    print("Input Validation:")
    for param, is_valid in validations.items():
        status = "✓" if is_valid else "✗"
        print(f"  {param}: {status}")
    print()
    
    # Calculate spectrum
    try:
        spectrum_df = calculator.create_spectrum_dataframe(flow_rate, duct_area, duct_height,
                                                         vane_chord_length, num_vanes,
                                                         total_pressure_drop, flow_velocity)
        
        print("Sound Power Level Spectrum:")
        print(spectrum_df.to_string(index=False))
        print()
        
        # Generate and display report
        report = calculator.generate_report(flow_rate, duct_area, duct_height,
                                          vane_chord_length, num_vanes,
                                          total_pressure_drop, flow_velocity)
        print(report)
        
        # Create plot
        calculator.plot_spectrum(flow_rate, duct_area, duct_height,
                               vane_chord_length, num_vanes,
                               total_pressure_drop, flow_velocity)
        
    except Exception as e:
        print(f"Error in calculation: {e}")


if __name__ == "__main__":
    main() 